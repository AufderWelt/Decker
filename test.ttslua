-- Decker test scenario

if dofile then
    dofile 'Decker.ttslua'
end
local function dummy(...) return ... end
if not spawnObjectJSON then
    spawnObjectJSON = function() return {highlightOn = dummy} end
end
if not JSON then
    JSON = {encode = dummy, decode = dummy}
end
local _JSON = JSON
JSON = {encode = _JSON.encode_pretty, encode_pretty = _JSON.encode_pretty, decode = _JSON.decode}

local cardFaces = 'https://i.imgur.com/wiyVst7.png'
local cardBack = 'https://i.imgur.com/KQtQGE7.png'

local cardAsset1 = Decker.Asset(cardFaces, cardBack, {width = 2, height = 2})
local cardAsset2 = Decker.Asset(cardBack, cardFaces, {width = 1, height = 2})

local cards1 = {
    Decker.Card(cardAsset1, 1, 1),
    Decker.Card(cardAsset1, 1, 2),
    Decker.Card(cardAsset1, 2, 1, {name = 'card three'}),
    Decker.Card(cardAsset1, 2, 2),
}
local cards2 = {
    Decker.Card(cardAsset2, 1, 1),
    Decker.Card(cardAsset2, 2, 1),
}
local deck1 = Decker.Deck(cards1):reverse()
local deck2 = Decker.AssetDeck(cardAsset1, 3)
local deck4 = Decker.Deck({cards1[1], cards2[1], cards2[2]})

local _x = -12
local function nextPos()
    local next = {_x, 3, 0}
    _x = _x + 4
    return {position = next}
end

function onLoad()
    -- {1, 2, 3, 4}
    local deckObj = deck2:copy():insert(deck1:cardAt(1), deck2:count()+1):spawn(nextPos())
    -- {3, 2, 1}
    deck2:swap(1, 3):spawn(nextPos())
    -- {2, 1, 2}
    deck1:removeMany(1, -3):remove(2):insert(deck1:cardAt(1), 2):insert(cards1[1], 2):spawn(nextPos())
    -- object validity
    deckObj.highlightOn({0, 1, 0}, 10)
    -- {1, card, back}
    deck4:spawn(nextPos())
    -- back
    cards1[3]:copy():setAsset(cardAsset2):setCommon({ name = 'back', desc = 'back desc' }):spawn(nextPos())
    -- 3
    cards1[3]:spawn(nextPos())
    -- {card, one, two}
    deck4:copy():switchAssets({[cardAsset1] = cardAsset2, [cardAsset2] = cardAsset1}):spawn(nextPos())
end
if spawnObjectJSON == dummy then
    onLoad()
end
